// autogenerated by syzkaller (https://github.com/google/syzkaller)

#define _GNU_SOURCE

#include <dirent.h>
#include <endian.h>
#include <errno.h>
#include <fcntl.h>
#include <signal.h>
#include <stdarg.h>
#include <stdbool.h>
#include <stdint.h>
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <sys/prctl.h>
#include <sys/stat.h>
#include <sys/syscall.h>
#include <sys/types.h>
#include <sys/wait.h>
#include <time.h>
#include <unistd.h>

static void sleep_ms(uint64_t ms)
{
  usleep(ms * 1000);
}

static uint64_t current_time_ms(void)
{
  struct timespec ts;
  if (clock_gettime(CLOCK_MONOTONIC, &ts))
    exit(1);
  return (uint64_t)ts.tv_sec * 1000 + (uint64_t)ts.tv_nsec / 1000000;
}

static bool write_file(const char* file, const char* what, ...)
{
  char buf[1024];
  va_list args;
  va_start(args, what);
  vsnprintf(buf, sizeof(buf), what, args);
  va_end(args);
  buf[sizeof(buf) - 1] = 0;
  int len = strlen(buf);
  int fd = open(file, O_WRONLY | O_CLOEXEC);
  if (fd == -1)
    return false;
  if (write(fd, buf, len) != len) {
    int err = errno;
    close(fd);
    errno = err;
    return false;
  }
  close(fd);
  return true;
}

static long syz_open_dev(volatile long a0, volatile long a1, volatile long a2)
{
  if (a0 == 0xc || a0 == 0xb) {
    char buf[128];
    sprintf(buf, "/dev/%s/%d:%d", a0 == 0xc ? "char" : "block", (uint8_t)a1,
            (uint8_t)a2);
    return open(buf, O_RDWR, 0);
  } else {
    unsigned long nb = a1;
    char buf[1024];
    char* hash;
    strncpy(buf, (char*)a0, sizeof(buf) - 1);
    buf[sizeof(buf) - 1] = 0;
    while ((hash = strchr(buf, '#'))) {
      *hash = '0' + (char)(nb % 10);
      nb /= 10;
    }
    return open(buf, a2, 0);
  }
}

static void kill_and_wait(int pid, int* status)
{
  kill(-pid, SIGKILL);
  kill(pid, SIGKILL);
  for (int i = 0; i < 100; i++) {
    if (waitpid(-1, status, WNOHANG | __WALL) == pid)
      return;
    usleep(1000);
  }
  DIR* dir = opendir("/sys/fs/fuse/connections");
  if (dir) {
    for (;;) {
      struct dirent* ent = readdir(dir);
      if (!ent)
        break;
      if (strcmp(ent->d_name, ".") == 0 || strcmp(ent->d_name, "..") == 0)
        continue;
      char abort[300];
      snprintf(abort, sizeof(abort), "/sys/fs/fuse/connections/%s/abort",
               ent->d_name);
      int fd = open(abort, O_WRONLY);
      if (fd == -1) {
        continue;
      }
      if (write(fd, abort, 1) < 0) {
      }
      close(fd);
    }
    closedir(dir);
  } else {
  }
  while (waitpid(-1, status, __WALL) != pid) {
  }
}

static void setup_test()
{
  prctl(PR_SET_PDEATHSIG, SIGKILL, 0, 0, 0);
  setpgrp();
  write_file("/proc/self/oom_score_adj", "1000");
}

static void execute_one(void);

#define WAIT_FLAGS __WALL

static void loop(void)
{
  int iter = 0;
  for (;; iter++) {
    int pid = fork();
    if (pid < 0)
      exit(1);
    if (pid == 0) {
      setup_test();
      execute_one();
      exit(0);
    }
    int status = 0;
    uint64_t start = current_time_ms();
    for (;;) {
      sleep_ms(10);
      if (waitpid(-1, &status, WNOHANG | WAIT_FLAGS) == pid)
        break;
      if (current_time_ms() - start < 5000)
        continue;
      kill_and_wait(pid, &status);
      break;
    }
  }
}

uint64_t r[1] = {0xffffffffffffffff};

void execute_one(void)
{
  intptr_t res = 0;
  if (write(1, "executing program\n", sizeof("executing program\n") - 1)) {
  }
  //  syz_open_dev$sg arguments: [
  //    dev: ptr[in, buffer] {
  //      buffer: {2f 64 65 76 2f 73 67 23 00} (length 0x9)
  //    }
  //    id: intptr = 0x1 (8 bytes)
  //    flags: open_flags = 0x8000 (8 bytes)
  //  ]
  //  returns fd_sg
  memcpy((void*)0x200000000500, "/dev/sg#\000", 9);
  res = -1;
  res = syz_open_dev(/*dev=*/0x200000000500, /*id=*/1,
                     /*flags=O_LARGEFILE*/ 0x8000);
  if (res != -1)
    r[0] = res;
  //  ioctl$SG_IO arguments: [
  //    fd: fd_sg (resource)
  //    cmd: const = 0x2285 (4 bytes)
  //    arg: ptr[in, sg_io_hdr] {
  //      sg_io_hdr {
  //        interface_id: sg_interface_id = 0x53 (4 bytes)
  //        dxfer_direction: sg_dxfer_direction = 0xfffffffffffffffc (4 bytes)
  //        cmd_len: len = 0xa (1 bytes)
  //        mx_sb_len: int8 = 0x4 (1 bytes)
  //        data: union sg_io_hdr_data {
  //          buffer: sg_io_hdr_data_buffer {
  //            iovec_count: const = 0x0 (2 bytes)
  //            dxfer_len: bytesize = 0x15 (4 bytes)
  //            dxferp: ptr[out, buffer] {
  //              buffer: (DirOut)
  //            }
  //          }
  //        }
  //        cmdp: ptr[in, buffer] {
  //          buffer: {51 20 c8 c6 45 7f f2 1e 31 53} (length 0xa)
  //        }
  //        sbp: nil
  //        timeout: int32 = 0x100 (4 bytes)
  //        flags: sg_flags = 0x0 (4 bytes)
  //        pack_id: int32 = 0xffffffffffffffff (4 bytes)
  //        usr_ptr: nil
  //        status: const = 0x0 (1 bytes)
  //        masked_status: const = 0x0 (1 bytes)
  //        msg_status: const = 0x0 (1 bytes)
  //        sb_len_wr: const = 0x0 (1 bytes)
  //        host_status: const = 0x0 (2 bytes)
  //        driver_status: const = 0x0 (2 bytes)
  //        resid: const = 0x0 (4 bytes)
  //        duration: const = 0x0 (4 bytes)
  //        info: const = 0x0 (4 bytes)
  //        pad = 0x0 (8 bytes)
  //      }
  //    }
  //  ]
  *(uint32_t*)0x200000000640 = 0x53;
  *(uint32_t*)0x200000000644 = 0xfffffffc;
  *(uint8_t*)0x200000000648 = 0xa;
  *(uint8_t*)0x200000000649 = 4;
  *(uint16_t*)0x20000000064a = 0;
  *(uint32_t*)0x20000000064c = 0x15;
  *(uint64_t*)0x200000000650 = 0x200000000040;
  *(uint64_t*)0x200000000658 = 0x200000000440;
  memcpy((void*)0x200000000440, "\x51\x20\xc8\xc6\x45\x7f\xf2\x1e\x31\x53", 10);
  *(uint64_t*)0x200000000660 = 0;
  *(uint32_t*)0x200000000668 = 0x100;
  *(uint32_t*)0x20000000066c = 0;
  *(uint32_t*)0x200000000670 = -1;
  *(uint64_t*)0x200000000674 = 0;
  *(uint8_t*)0x20000000067c = 0;
  *(uint8_t*)0x20000000067d = 0;
  *(uint8_t*)0x20000000067e = 0;
  *(uint8_t*)0x20000000067f = 0;
  *(uint16_t*)0x200000000680 = 0;
  *(uint16_t*)0x200000000682 = 0;
  *(uint32_t*)0x200000000684 = 0;
  *(uint32_t*)0x200000000688 = 0;
  *(uint32_t*)0x20000000068c = 0;
  syscall(__NR_ioctl, /*fd=*/r[0], /*cmd=*/0x2285, /*arg=*/0x200000000640ul);
}
int main(void)
{
  syscall(__NR_mmap, /*addr=*/0x1ffffffff000ul, /*len=*/0x1000ul, /*prot=*/0ul,
          /*flags=MAP_FIXED|MAP_ANONYMOUS|MAP_PRIVATE*/ 0x32ul,
          /*fd=*/(intptr_t)-1, /*offset=*/0ul);
  syscall(__NR_mmap, /*addr=*/0x200000000000ul, /*len=*/0x1000000ul,
          /*prot=PROT_WRITE|PROT_READ|PROT_EXEC*/ 7ul,
          /*flags=MAP_FIXED|MAP_ANONYMOUS|MAP_PRIVATE*/ 0x32ul,
          /*fd=*/(intptr_t)-1, /*offset=*/0ul);
  syscall(__NR_mmap, /*addr=*/0x200001000000ul, /*len=*/0x1000ul, /*prot=*/0ul,
          /*flags=MAP_FIXED|MAP_ANONYMOUS|MAP_PRIVATE*/ 0x32ul,
          /*fd=*/(intptr_t)-1, /*offset=*/0ul);
  const char* reason;
  (void)reason;
  loop();
  return 0;
}
