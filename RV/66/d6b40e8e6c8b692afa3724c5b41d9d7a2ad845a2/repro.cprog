// autogenerated by syzkaller (https://github.com/google/syzkaller)

#define _GNU_SOURCE 

#include <dirent.h>
#include <endian.h>
#include <errno.h>
#include <fcntl.h>
#include <pthread.h>
#include <setjmp.h>
#include <signal.h>
#include <stdarg.h>
#include <stdbool.h>
#include <stddef.h>
#include <stdint.h>
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <sys/ioctl.h>
#include <sys/mman.h>
#include <sys/mount.h>
#include <sys/prctl.h>
#include <sys/stat.h>
#include <sys/syscall.h>
#include <sys/types.h>
#include <sys/wait.h>
#include <time.h>
#include <unistd.h>

#include <linux/futex.h>
#include <linux/loop.h>

#ifndef __NR_ftruncate
#define __NR_ftruncate 46
#endif
#ifndef __NR_ioctl
#define __NR_ioctl 29
#endif
#ifndef __NR_landlock_add_rule
#define __NR_landlock_add_rule 445
#endif
#ifndef __NR_landlock_create_ruleset
#define __NR_landlock_create_ruleset 444
#endif
#ifndef __NR_landlock_restrict_self
#define __NR_landlock_restrict_self 446
#endif
#ifndef __NR_memfd_create
#define __NR_memfd_create 279
#endif
#ifndef __NR_mkdirat
#define __NR_mkdirat 34
#endif
#ifndef __NR_mknodat
#define __NR_mknodat 33
#endif
#ifndef __NR_mmap
#define __NR_mmap 222
#endif
#ifndef __NR_openat
#define __NR_openat 56
#endif
#ifndef __NR_prctl
#define __NR_prctl 167
#endif
#ifndef __NR_write
#define __NR_write 64
#endif

static unsigned long long procid;

static __thread int clone_ongoing;
static __thread int skip_segv;
static __thread jmp_buf segv_env;

static void segv_handler(int sig, siginfo_t* info, void* ctx)
{
	if (__atomic_load_n(&clone_ongoing, __ATOMIC_RELAXED) != 0) {
		exit(sig);
	}
	uintptr_t addr = (uintptr_t)info->si_addr;
	const uintptr_t prog_start = 1 << 20;
	const uintptr_t prog_end = 100 << 20;
	int skip = __atomic_load_n(&skip_segv, __ATOMIC_RELAXED) != 0;
	int valid = addr < prog_start || addr > prog_end;
	if (skip && valid) {
		_longjmp(segv_env, 1);
	}
	exit(sig);
}

static void install_segv_handler(void)
{
	struct sigaction sa;
	memset(&sa, 0, sizeof(sa));
	sa.sa_handler = SIG_IGN;
	syscall(SYS_rt_sigaction, 0x20, &sa, NULL, 8);
	syscall(SYS_rt_sigaction, 0x21, &sa, NULL, 8);
	memset(&sa, 0, sizeof(sa));
	sa.sa_sigaction = segv_handler;
	sa.sa_flags = SA_NODEFER | SA_SIGINFO;
	sigaction(SIGSEGV, &sa, NULL);
	sigaction(SIGBUS, &sa, NULL);
}

#define NONFAILING(...) ({ int ok = 1; __atomic_fetch_add(&skip_segv, 1, __ATOMIC_SEQ_CST); if (_setjmp(segv_env) == 0) { __VA_ARGS__; } else ok = 0; __atomic_fetch_sub(&skip_segv, 1, __ATOMIC_SEQ_CST); ok; })

static void sleep_ms(uint64_t ms)
{
	usleep(ms * 1000);
}

static uint64_t current_time_ms(void)
{
	struct timespec ts;
	if (clock_gettime(CLOCK_MONOTONIC, &ts))
	exit(1);
	return (uint64_t)ts.tv_sec * 1000 + (uint64_t)ts.tv_nsec / 1000000;
}

static void use_temporary_dir(void)
{
	char tmpdir_template[] = "./syzkaller.XXXXXX";
	char* tmpdir = mkdtemp(tmpdir_template);
	if (!tmpdir)
	exit(1);
	if (chmod(tmpdir, 0777))
	exit(1);
	if (chdir(tmpdir))
	exit(1);
}

static void thread_start(void* (*fn)(void*), void* arg)
{
	pthread_t th;
	pthread_attr_t attr;
	pthread_attr_init(&attr);
	pthread_attr_setstacksize(&attr, 128 << 10);
	int i = 0;
	for (; i < 100; i++) {
		if (pthread_create(&th, &attr, fn, arg) == 0) {
			pthread_attr_destroy(&attr);
			return;
		}
		if (errno == EAGAIN) {
			usleep(50);
			continue;
		}
		break;
	}
	exit(1);
}

typedef struct {
	int state;
} event_t;

static void event_init(event_t* ev)
{
	ev->state = 0;
}

static void event_reset(event_t* ev)
{
	ev->state = 0;
}

static void event_set(event_t* ev)
{
	if (ev->state)
	exit(1);
	__atomic_store_n(&ev->state, 1, __ATOMIC_RELEASE);
	syscall(SYS_futex, &ev->state, FUTEX_WAKE | FUTEX_PRIVATE_FLAG, 1000000);
}

static void event_wait(event_t* ev)
{
	while (!__atomic_load_n(&ev->state, __ATOMIC_ACQUIRE))
		syscall(SYS_futex, &ev->state, FUTEX_WAIT | FUTEX_PRIVATE_FLAG, 0, 0);
}

static int event_isset(event_t* ev)
{
	return __atomic_load_n(&ev->state, __ATOMIC_ACQUIRE);
}

static int event_timedwait(event_t* ev, uint64_t timeout)
{
	uint64_t start = current_time_ms();
	uint64_t now = start;
	for (;;) {
		uint64_t remain = timeout - (now - start);
		struct timespec ts;
		ts.tv_sec = remain / 1000;
		ts.tv_nsec = (remain % 1000) * 1000 * 1000;
		syscall(SYS_futex, &ev->state, FUTEX_WAIT | FUTEX_PRIVATE_FLAG, 0, &ts);
		if (__atomic_load_n(&ev->state, __ATOMIC_ACQUIRE))
			return 1;
		now = current_time_ms();
		if (now - start > timeout)
			return 0;
	}
}

static bool write_file(const char* file, const char* what, ...)
{
	char buf[1024];
	va_list args;
	va_start(args, what);
	vsnprintf(buf, sizeof(buf), what, args);
	va_end(args);
	buf[sizeof(buf) - 1] = 0;
	int len = strlen(buf);
	int fd = open(file, O_WRONLY | O_CLOEXEC);
	if (fd == -1)
		return false;
	if (write(fd, buf, len) != len) {
		int err = errno;
		close(fd);
		errno = err;
		return false;
	}
	close(fd);
	return true;
}

//% This code is derived from puff.{c,h}, found in the zlib development. The
//% original files come with the following copyright notice:

//% Copyright (C) 2002-2013 Mark Adler, all rights reserved
//% version 2.3, 21 Jan 2013
//% This software is provided 'as-is', without any express or implied
//% warranty.  In no event will the author be held liable for any damages
//% arising from the use of this software.
//% Permission is granted to anyone to use this software for any purpose,
//% including commercial applications, and to alter it and redistribute it
//% freely, subject to the following restrictions:
//% 1. The origin of this software must not be misrepresented; you must not
//%    claim that you wrote the original software. If you use this software
//%    in a product, an acknowledgment in the product documentation would be
//%    appreciated but is not required.
//% 2. Altered source versions must be plainly marked as such, and must not be
//%    misrepresented as being the original software.
//% 3. This notice may not be removed or altered from any source distribution.
//% Mark Adler    madler@alumni.caltech.edu

//% BEGIN CODE DERIVED FROM puff.{c,h}

#define MAXBITS 15
#define MAXLCODES 286
#define MAXDCODES 30
#define MAXCODES (MAXLCODES + MAXDCODES)
#define FIXLCODES 288

struct puff_state {
	unsigned char* out;
	unsigned long outlen;
	unsigned long outcnt;
	const unsigned char* in;
	unsigned long inlen;
	unsigned long incnt;
	int bitbuf;
	int bitcnt;
	jmp_buf env;
};
static int puff_bits(struct puff_state* s, int need)
{
	long val = s->bitbuf;
	while (s->bitcnt < need) {
		if (s->incnt == s->inlen)
			longjmp(s->env, 1);
		val |= (long)(s->in[s->incnt++]) << s->bitcnt;
		s->bitcnt += 8;
	}
	s->bitbuf = (int)(val >> need);
	s->bitcnt -= need;
	return (int)(val & ((1L << need) - 1));
}
static int puff_stored(struct puff_state* s)
{
	s->bitbuf = 0;
	s->bitcnt = 0;
	if (s->incnt + 4 > s->inlen)
		return 2;
	unsigned len = s->in[s->incnt++];
	len |= s->in[s->incnt++] << 8;
	if (s->in[s->incnt++] != (~len & 0xff) ||
	    s->in[s->incnt++] != ((~len >> 8) & 0xff))
		return -2;
	if (s->incnt + len > s->inlen)
		return 2;
	if (s->outcnt + len > s->outlen)
		return 1;
	for (; len--; s->outcnt++, s->incnt++) {
		if (s->in[s->incnt])
			s->out[s->outcnt] = s->in[s->incnt];
	}
	return 0;
}
struct puff_huffman {
	short* count;
	short* symbol;
};
static int puff_decode(struct puff_state* s, const struct puff_huffman* h)
{
	int first = 0;
	int index = 0;
	int bitbuf = s->bitbuf;
	int left = s->bitcnt;
	int code = first = index = 0;
	int len = 1;
	short* next = h->count + 1;
	while (1) {
		while (left--) {
			code |= bitbuf & 1;
			bitbuf >>= 1;
			int count = *next++;
			if (code - count < first) {
				s->bitbuf = bitbuf;
				s->bitcnt = (s->bitcnt - len) & 7;
				return h->symbol[index + (code - first)];
			}
			index += count;
			first += count;
			first <<= 1;
			code <<= 1;
			len++;
		}
		left = (MAXBITS + 1) - len;
		if (left == 0)
			break;
		if (s->incnt == s->inlen)
			longjmp(s->env, 1);
		bitbuf = s->in[s->incnt++];
		if (left > 8)
			left = 8;
	}
	return -10;
}
static int puff_construct(struct puff_huffman* h, const short* length, int n)
{
	int len;
	for (len = 0; len <= MAXBITS; len++)
		h->count[len] = 0;
	int symbol;
	for (symbol = 0; symbol < n; symbol++)
		(h->count[length[symbol]])++;
	if (h->count[0] == n)
		return 0;
	int left = 1;
	for (len = 1; len <= MAXBITS; len++) {
		left <<= 1;
		left -= h->count[len];
		if (left < 0)
			return left;
	}
	short offs[MAXBITS + 1];
	offs[1] = 0;
	for (len = 1; len < MAXBITS; len++)
		offs[len + 1] = offs[len] + h->count[len];
	for (symbol = 0; symbol < n; symbol++)
		if (length[symbol] != 0)
			h->symbol[offs[length[symbol]]++] = symbol;
	return left;
}
static int puff_codes(struct puff_state* s,
		      const struct puff_huffman* lencode,
		      const struct puff_huffman* distcode)
{
	static const short lens[29] = {
				       3, 4, 5, 6, 7, 8, 9, 10, 11, 13, 15, 17, 19, 23, 27, 31,
				       35, 43, 51, 59, 67, 83, 99, 115, 131, 163, 195, 227, 258};
	static const short lext[29] = {
				       0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 2, 2, 2, 2,
				       3, 3, 3, 3, 4, 4, 4, 4, 5, 5, 5, 5, 0};
	static const short dists[30] = {
					1, 2, 3, 4, 5, 7, 9, 13, 17, 25, 33, 49, 65, 97, 129, 193,
					257, 385, 513, 769, 1025, 1537, 2049, 3073, 4097, 6145,
					8193, 12289, 16385, 24577};
	static const short dext[30] = {
				       0, 0, 0, 0, 1, 1, 2, 2, 3, 3, 4, 4, 5, 5, 6, 6,
				       7, 7, 8, 8, 9, 9, 10, 10, 11, 11,
				       12, 12, 13, 13};
	int symbol;
	do {
		symbol = puff_decode(s, lencode);
		if (symbol < 0)
			return symbol;
		if (symbol < 256) {
			if (s->outcnt == s->outlen)
				return 1;
			if (symbol)
				s->out[s->outcnt] = symbol;
			s->outcnt++;
		} else if (symbol > 256) {
			symbol -= 257;
			if (symbol >= 29)
				return -10;
			int len = lens[symbol] + puff_bits(s, lext[symbol]);
			symbol = puff_decode(s, distcode);
			if (symbol < 0)
				return symbol;
			unsigned dist = dists[symbol] + puff_bits(s, dext[symbol]);
			if (dist > s->outcnt)
				return -11;
			if (s->outcnt + len > s->outlen)
				return 1;
			while (len--) {
				if (dist <= s->outcnt && s->out[s->outcnt - dist])
					s->out[s->outcnt] = s->out[s->outcnt - dist];
				s->outcnt++;
			}
		}
	} while (symbol != 256);
	return 0;
}
static int puff_fixed(struct puff_state* s)
{
	static int virgin = 1;
	static short lencnt[MAXBITS + 1], lensym[FIXLCODES];
	static short distcnt[MAXBITS + 1], distsym[MAXDCODES];
	static struct puff_huffman lencode, distcode;
	if (virgin) {
		lencode.count = lencnt;
		lencode.symbol = lensym;
		distcode.count = distcnt;
		distcode.symbol = distsym;
		short lengths[FIXLCODES];
		int symbol;
		for (symbol = 0; symbol < 144; symbol++)
			lengths[symbol] = 8;
		for (; symbol < 256; symbol++)
			lengths[symbol] = 9;
		for (; symbol < 280; symbol++)
			lengths[symbol] = 7;
		for (; symbol < FIXLCODES; symbol++)
			lengths[symbol] = 8;
		puff_construct(&lencode, lengths, FIXLCODES);
		for (symbol = 0; symbol < MAXDCODES; symbol++)
			lengths[symbol] = 5;
		puff_construct(&distcode, lengths, MAXDCODES);
		virgin = 0;
	}
	return puff_codes(s, &lencode, &distcode);
}
static int puff_dynamic(struct puff_state* s)
{
	static const short order[19] =
	    {16, 17, 18, 0, 8, 7, 9, 6, 10, 5, 11, 4, 12, 3, 13, 2, 14, 1, 15};
	int nlen = puff_bits(s, 5) + 257;
	int ndist = puff_bits(s, 5) + 1;
	int ncode = puff_bits(s, 4) + 4;
	if (nlen > MAXLCODES || ndist > MAXDCODES)
		return -3;
	short lengths[MAXCODES];
	int index;
	for (index = 0; index < ncode; index++)
		lengths[order[index]] = puff_bits(s, 3);
	for (; index < 19; index++)
		lengths[order[index]] = 0;
	short lencnt[MAXBITS + 1], lensym[MAXLCODES];
	struct puff_huffman lencode = {lencnt, lensym};
	int err = puff_construct(&lencode, lengths, 19);
	if (err != 0)
		return -4;
	index = 0;
	while (index < nlen + ndist) {
		int symbol;
		int len;
		symbol = puff_decode(s, &lencode);
		if (symbol < 0)
			return symbol;
		if (symbol < 16)
			lengths[index++] = symbol;
		else {
			len = 0;
			if (symbol == 16) {
				if (index == 0)
					return -5;
				len = lengths[index - 1];
				symbol = 3 + puff_bits(s, 2);
			} else if (symbol == 17)
				symbol = 3 + puff_bits(s, 3);
			else
				symbol = 11 + puff_bits(s, 7);
			if (index + symbol > nlen + ndist)
				return -6;
			while (symbol--)
				lengths[index++] = len;
		}
	}
	if (lengths[256] == 0)
		return -9;
	err = puff_construct(&lencode, lengths, nlen);
	if (err && (err < 0 || nlen != lencode.count[0] + lencode.count[1]))
		return -7;
	short distcnt[MAXBITS + 1], distsym[MAXDCODES];
	struct puff_huffman distcode = {distcnt, distsym};
	err = puff_construct(&distcode, lengths + nlen, ndist);
	if (err && (err < 0 || ndist != distcode.count[0] + distcode.count[1]))
		return -8;
	return puff_codes(s, &lencode, &distcode);
}
static int puff(
    unsigned char* dest,
    unsigned long* destlen,
    const unsigned char* source,
    unsigned long sourcelen)
{
	struct puff_state s = {
	    .out = dest,
	    .outlen = *destlen,
	    .outcnt = 0,
	    .in = source,
	    .inlen = sourcelen,
	    .incnt = 0,
	    .bitbuf = 0,
	    .bitcnt = 0,
	};
	int err;
	if (setjmp(s.env) != 0)
		err = 2;
	else {
		int last;
		do {
			last = puff_bits(&s, 1);
			int type = puff_bits(&s, 2);
			err = type == 0 ? puff_stored(&s) : (type == 1 ? puff_fixed(&s) : (type == 2 ? puff_dynamic(&s) : -1));
			if (err != 0)
				break;
		} while (!last);
	}
	*destlen = s.outcnt;
	return err;
}

//% END CODE DERIVED FROM puff.{c,h}

#define ZLIB_HEADER_WIDTH 2

static int puff_zlib_to_file(const unsigned char* source, unsigned long sourcelen, int dest_fd)
{
	if (sourcelen < ZLIB_HEADER_WIDTH)
		return 0;
	source += ZLIB_HEADER_WIDTH;
	sourcelen -= ZLIB_HEADER_WIDTH;
	const unsigned long max_destlen = 132 << 20;
	void* ret = mmap(0, max_destlen, PROT_WRITE | PROT_READ, MAP_PRIVATE | MAP_ANON, -1, 0);
	if (ret == MAP_FAILED)
		return -1;
	unsigned char* dest = (unsigned char*)ret;
	unsigned long destlen = max_destlen;
	int err = puff(dest, &destlen, source, sourcelen);
	if (err) {
		munmap(dest, max_destlen);
		errno = -err;
		return -1;
	}
	if (write(dest_fd, dest, destlen) != (ssize_t)destlen) {
		munmap(dest, max_destlen);
		return -1;
	}
	return munmap(dest, max_destlen);
}

static int setup_loop_device(unsigned char* data, unsigned long size, const char* loopname, int* loopfd_p)
{
	int err = 0, loopfd = -1;
	int memfd = syscall(__NR_memfd_create, "syzkaller", 0);
	if (memfd == -1) {
		err = errno;
		goto error;
	}
	if (puff_zlib_to_file(data, size, memfd)) {
		err = errno;
		goto error_close_memfd;
	}
	loopfd = open(loopname, O_RDWR);
	if (loopfd == -1) {
		err = errno;
		goto error_close_memfd;
	}
	if (ioctl(loopfd, LOOP_SET_FD, memfd)) {
		if (errno != EBUSY) {
			err = errno;
			goto error_close_loop;
		}
		ioctl(loopfd, LOOP_CLR_FD, 0);
		usleep(1000);
		if (ioctl(loopfd, LOOP_SET_FD, memfd)) {
			err = errno;
			goto error_close_loop;
		}
	}
	close(memfd);
	*loopfd_p = loopfd;
	return 0;

error_close_loop:
	close(loopfd);
error_close_memfd:
	close(memfd);
error:
	errno = err;
	return -1;
}

static void reset_loop_device(const char* loopname)
{
	int loopfd = open(loopname, O_RDWR);
	if (loopfd == -1) {
		return;
	}
	if (ioctl(loopfd, LOOP_CLR_FD, 0)) {
	}
	close(loopfd);
}

static long syz_mount_image(
    volatile long fsarg,
    volatile long dir,
    volatile long flags,
    volatile long optsarg,
    volatile long change_dir,
    volatile unsigned long size,
    volatile long image)
{
	unsigned char* data = (unsigned char*)image;
	int res = -1, err = 0, need_loop_device = !!size;
	char* mount_opts = (char*)optsarg;
	char* target = (char*)dir;
	char* fs = (char*)fsarg;
	char* source = NULL;
	char loopname[64];
	if (need_loop_device) {
		int loopfd;
		memset(loopname, 0, sizeof(loopname));
		snprintf(loopname, sizeof(loopname), "/dev/loop%llu", procid);
		if (setup_loop_device(data, size, loopname, &loopfd) == -1)
			return -1;
		close(loopfd);
		source = loopname;
	}
	mkdir(target, 0777);
	char opts[256];
	memset(opts, 0, sizeof(opts));
	if (strlen(mount_opts) > (sizeof(opts) - 32)) {
	}
	strncpy(opts, mount_opts, sizeof(opts) - 32);
	if (strcmp(fs, "iso9660") == 0) {
		flags |= MS_RDONLY;
	} else if (strncmp(fs, "ext", 3) == 0) {
		bool has_remount_ro = false;
		char* remount_ro_start = strstr(opts, "errors=remount-ro");
		if (remount_ro_start != NULL) {
			char after = *(remount_ro_start + strlen("errors=remount-ro"));
			char before = remount_ro_start == opts ? '\0' : *(remount_ro_start - 1);
			has_remount_ro = ((before == '\0' || before == ',') && (after == '\0' || after == ','));
		}
		if (strstr(opts, "errors=panic") || !has_remount_ro)
			strcat(opts, ",errors=continue");
	} else if (strcmp(fs, "xfs") == 0) {
		strcat(opts, ",nouuid");
	} else if (strncmp(fs, "gfs2", 4) == 0 && (strstr(opts, "errors=panic") || strstr(opts, "debug"))) {
		strcat(opts, ",errors=withdraw");
	}
	res = mount(source, target, fs, flags, opts);
	if (res == -1) {
		err = errno;
		goto error_clear_loop;
	}
	res = open(target, O_RDONLY | O_DIRECTORY);
	if (res == -1) {
		err = errno;
		goto error_clear_loop;
	}
	if (change_dir) {
		res = chdir(target);
		if (res == -1) {
			err = errno;
		}
	}

error_clear_loop:
	if (need_loop_device)
		reset_loop_device(loopname);
	errno = err;
	return res;
}

#define FS_IOC_SETFLAGS _IOW('f', 2, long)
static void remove_dir(const char* dir)
{
	int iter = 0;
	DIR* dp = 0;
	const int umount_flags = MNT_FORCE | UMOUNT_NOFOLLOW;

retry:
		while (umount2(dir, umount_flags) == 0) {
		}
	dp = opendir(dir);
	if (dp == NULL) {
		if (errno == EMFILE) {
	exit(1);
		}
	exit(1);
	}
	struct dirent* ep = 0;
	while ((ep = readdir(dp))) {
		if (strcmp(ep->d_name, ".") == 0 || strcmp(ep->d_name, "..") == 0)
			continue;
		char filename[FILENAME_MAX];
		snprintf(filename, sizeof(filename), "%s/%s", dir, ep->d_name);
			while (umount2(filename, umount_flags) == 0) {
			}
		struct stat st;
		if (lstat(filename, &st))
	exit(1);
		if (S_ISDIR(st.st_mode)) {
			remove_dir(filename);
			continue;
		}
		int i;
		for (i = 0;; i++) {
			if (unlink(filename) == 0)
				break;
			if (errno == EPERM) {
				int fd = open(filename, O_RDONLY);
				if (fd != -1) {
					long flags = 0;
					if (ioctl(fd, FS_IOC_SETFLAGS, &flags) == 0) {
					}
					close(fd);
					continue;
				}
			}
			if (errno == EROFS) {
				break;
			}
			if (errno != EBUSY || i > 100)
	exit(1);
				if (umount2(filename, umount_flags))
	exit(1);
		}
	}
	closedir(dp);
	for (int i = 0;; i++) {
		if (rmdir(dir) == 0)
			break;
		if (i < 100) {
			if (errno == EPERM) {
				int fd = open(dir, O_RDONLY);
				if (fd != -1) {
					long flags = 0;
					if (ioctl(fd, FS_IOC_SETFLAGS, &flags) == 0) {
					}
					close(fd);
					continue;
				}
			}
			if (errno == EROFS) {
				break;
			}
			if (errno == EBUSY) {
					if (umount2(dir, umount_flags))
	exit(1);
				continue;
			}
			if (errno == ENOTEMPTY) {
				if (iter < 100) {
					iter++;
					goto retry;
				}
			}
		}
	exit(1);
	}
}

static void kill_and_wait(int pid, int* status)
{
	kill(-pid, SIGKILL);
	kill(pid, SIGKILL);
	for (int i = 0; i < 100; i++) {
		if (waitpid(-1, status, WNOHANG | __WALL) == pid)
			return;
		usleep(1000);
	}
	DIR* dir = opendir("/sys/fs/fuse/connections");
	if (dir) {
		for (;;) {
			struct dirent* ent = readdir(dir);
			if (!ent)
				break;
			if (strcmp(ent->d_name, ".") == 0 || strcmp(ent->d_name, "..") == 0)
				continue;
			char abort[300];
			snprintf(abort, sizeof(abort), "/sys/fs/fuse/connections/%s/abort", ent->d_name);
			int fd = open(abort, O_WRONLY);
			if (fd == -1) {
				continue;
			}
			if (write(fd, abort, 1) < 0) {
			}
			close(fd);
		}
		closedir(dir);
	} else {
	}
	while (waitpid(-1, status, __WALL) != pid) {
	}
}

static void reset_loop()
{
	char buf[64];
	snprintf(buf, sizeof(buf), "/dev/loop%llu", procid);
	int loopfd = open(buf, O_RDWR);
	if (loopfd != -1) {
		ioctl(loopfd, LOOP_CLR_FD, 0);
		close(loopfd);
	}
}

static void setup_test()
{
	prctl(PR_SET_PDEATHSIG, SIGKILL, 0, 0, 0);
	setpgrp();
	write_file("/proc/self/oom_score_adj", "1000");
	if (symlink("/dev/binderfs", "./binderfs")) {
	}
}

static void setup_sysctl()
{
	int cad_pid = fork();
	if (cad_pid < 0)
	exit(1);
	if (cad_pid == 0) {
		for (;;)
			sleep(100);
	}
	char tmppid[32];
	snprintf(tmppid, sizeof(tmppid), "%d", cad_pid);
	struct {
		const char* name;
		const char* data;
	} files[] = {
	    {"/proc/sys/kernel/hung_task_check_interval_secs", "20"},
	    {"/proc/sys/net/core/bpf_jit_kallsyms", "1"},
	    {"/proc/sys/net/core/bpf_jit_harden", "0"},
	    {"/proc/sys/kernel/kptr_restrict", "0"},
	    {"/proc/sys/kernel/softlockup_all_cpu_backtrace", "1"},
	    {"/proc/sys/fs/mount-max", "100"},
	    {"/proc/sys/vm/oom_dump_tasks", "0"},
	    {"/proc/sys/debug/exception-trace", "0"},
	    {"/proc/sys/kernel/printk", "7 4 1 3"},
	    {"/proc/sys/kernel/keys/gc_delay", "1"},
	    {"/proc/sys/vm/oom_kill_allocating_task", "1"},
	    {"/proc/sys/kernel/ctrl-alt-del", "0"},
	    {"/proc/sys/kernel/cad_pid", tmppid},
	};
	for (size_t i = 0; i < sizeof(files) / sizeof(files[0]); i++) {
		if (!write_file(files[i].name, files[i].data)) {
		}
	}
	kill(cad_pid, SIGKILL);
	while (waitpid(cad_pid, NULL, 0) != cad_pid)
		;
}

struct thread_t {
	int created, call;
	event_t ready, done;
};

static struct thread_t threads[16];
static void execute_call(int call);
static int running;

static void* thr(void* arg)
{
	struct thread_t* th = (struct thread_t*)arg;
	for (;;) {
		event_wait(&th->ready);
		event_reset(&th->ready);
		execute_call(th->call);
		__atomic_fetch_sub(&running, 1, __ATOMIC_RELAXED);
		event_set(&th->done);
	}
	return 0;
}

static void execute_one(void)
{
	if (write(1, "executing program\n", sizeof("executing program\n") - 1)) {
	}
	int i, call, thread;
	for (call = 0; call < 21; call++) {
		for (thread = 0; thread < (int)(sizeof(threads) / sizeof(threads[0])); thread++) {
			struct thread_t* th = &threads[thread];
			if (!th->created) {
				th->created = 1;
				event_init(&th->ready);
				event_init(&th->done);
				event_set(&th->done);
				thread_start(thr, th);
			}
			if (!event_isset(&th->done))
				continue;
			event_reset(&th->done);
			th->call = call;
			__atomic_fetch_add(&running, 1, __ATOMIC_RELAXED);
			event_set(&th->ready);
			event_timedwait(&th->done, 500 + (call == 0 ? 12000 : 0));
			break;
		}
	}
	for (i = 0; i < 100 && __atomic_load_n(&running, __ATOMIC_RELAXED); i++)
		sleep_ms(1);
}

static void execute_one(void);

#define WAIT_FLAGS __WALL

static void loop(void)
{
	int iter = 0;
	for (;; iter++) {
		char cwdbuf[32];
		sprintf(cwdbuf, "./%d", iter);
		if (mkdir(cwdbuf, 0777))
	exit(1);
		reset_loop();
		int pid = fork();
		if (pid < 0)
	exit(1);
		if (pid == 0) {
			if (chdir(cwdbuf))
	exit(1);
			setup_test();
			execute_one();
			exit(0);
		}
		int status = 0;
		uint64_t start = current_time_ms();
		for (;;) {
			sleep_ms(10);
			if (waitpid(-1, &status, WNOHANG | WAIT_FLAGS) == pid)
				break;
			if (current_time_ms() - start < 15000)
				continue;
			kill_and_wait(pid, &status);
			break;
		}
		remove_dir(cwdbuf);
	}
}

uint64_t r[7] = {0xffffffffffffffff, 0xffffffffffffffff, 0xffffffffffffffff, 0xffffffffffffffff, 0xffffffffffffffff, 0xffffffffffffffff, 0xffffffffffffffff};

void execute_call(int call)
{
		intptr_t res = 0;
	switch (call) {
	case 0:
//  syz_mount_image$ext4 arguments: [
//    fs: ptr[in, buffer] {
//      buffer: {65 78 74 34 00} (length 0x5)
//    }
//    dir: ptr[in, buffer] {
//      buffer: {2e 2f 6d 6e 74 00} (length 0x6)
//    }
//    flags: mount_flags = 0x0 (8 bytes)
//    opts: ptr[in, fs_options[ext4_options]] {
//      fs_options[ext4_options] {
//        elems: array[fs_opt_elem[ext4_options]] {
//        }
//        common: array[fs_opt_elem[fs_options_common]] {
//        }
//        null: const = 0x0 (1 bytes)
//      }
//    }
//    chdir: int8 = 0x0 (1 bytes)
//    size: len = 0x236 (8 bytes)
//    img: ptr[in, buffer] {
//      buffer: (compressed buffer with length 0x236)
//    }
//  ]
//  returns fd_dir
		NONFAILING(memcpy((void*)0x200000000240, "ext4\000", 5));
		NONFAILING(memcpy((void*)0x200000000280, "./mnt\000", 6));
		NONFAILING(*(uint8_t*)0x2000000002c0 = 0);
		NONFAILING(memcpy((void*)0x200000000300, "\x78\x9c\xec\xdd\x31\x68\x33\x65\x1c\x06\xf0\xe7\x2e\x89\x9f\xfd\xbe\x20\x55\x17\x41\x50\x41\x44\xb4\x50\xea\x26\xb8\xd4\x45\xa1\x20\xa5\x88\x08\x2a\x54\x44\x5c\x94\x56\xa8\x2d\x6e\xad\x93\x8b\x83\xce\x2a\x9d\x5c\x8a\xb8\x59\x1d\xa5\x4b\x71\x51\x04\xa7\xaa\x1d\xea\x22\x68\x71\xb0\x38\xe8\x10\xb9\x5c\x2b\xd5\x46\x14\x53\x73\xf2\xdd\xef\x07\x97\xdc\x25\xef\x7b\xff\xf7\xb8\x7b\xde\x64\x39\x2e\x40\x6b\x4d\x27\x99\x4f\xd2\x49\x32\x93\xa4\x97\xa4\x38\xdf\xe0\xae\x7a\x99\x3e\xdd\xdc\x9e\xda\x5f\x4e\x06\x83\xc7\x7f\x2c\x86\xed\xea\xed\xda\x59\xbf\x6b\x49\xb6\x92\x3c\x98\x64\xaf\x2c\xf2\x62\x37\xd9\xd8\x7d\xfa\xe8\xe7\x83\x47\xef\x7d\x63\xbd\x77\xcf\x7b\xbb\x4f\x4d\x4d\xf4\x20\x4f\x1d\x1f\x1d\x3e\x76\xf2\xee\xe2\xeb\x1f\x2e\x3c\xb0\xf1\xf9\x97\xdf\x2f\x16\x99\x4f\xff\x0f\xc7\x75\xf9\x8a\x11\x9f\x75\x8b\xe4\x96\xff\xa2\xd8\xff\x44\xd1\x6d\x7a\x04\xfc\x13\x4b\xaf\x7e\xf0\x55\x95\xfb\x5b\x93\xdc\x3d\xcc\x7f\x2f\x65\xea\x93\xf7\xe6\xda\x0d\x7b\xbd\xdc\xff\xce\x5f\xf5\x7d\xeb\x87\x2f\x6e\x9f\xe4\x58\x81\xcb\x37\x18\xf4\xaa\xdf\xc0\xad\x01\xd0\x3a\x65\x92\x7e\x8a\x72\x36\x49\xbd\x5e\x96\xb3\xb3\xf5\x7f\xf8\xaf\x3b\x57\xcb\x97\x56\xd7\x5e\x99\x79\x61\x75\x7d\xe5\xf9\xa6\x67\x2a\xe0\xb2\xf4\x93\xc3\x47\x3e\xbe\xf2\xd1\xb5\x3f\xe5\xff\xbb\x4e\x9d\x7f\xe0\xfa\x55\xe5\xff\x89\xa5\x9d\x6f\xaa\xf5\x93\x4e\xd3\xa3\x01\x26\xa9\xca\xff\xcc\xb3\x9b\xf7\x45\xfe\xa1\x75\xe4\x1f\xda\x4b\xfe\xa1\xbd\xe4\x1f\xda\x4b\xfe\xa1\xbd\xe4\x1f\xda\x4b\xfe\xa1\xbd\xe4\x1f\xda\x4b\xfe\xa1\xbd\xe4\x1f\xda\xeb\x7c\xfe\x01\x80\x76\x19\x5c\x69\xfa\x0e\x64\xa0\x29\x4d\xcf\x3f\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\xc0\x45\xdb\x53\xfb\xcb\x67\xcb\xa4\x6a\x7e\xfa\x76\x72\xfc\x70\x92\xee\xa8\xfa\x9d\xe1\xf3\x88\x93\x1b\x87\xaf\x57\x7f\x2a\xaa\x66\xbf\x2b\xea\x6e\x63\x79\xe6\xce\x31\x77\x30\xa6\xf7\x1b\xbe\xfb\xfa\xa6\x6f\x9b\xad\xff\xd9\x1d\xcd\xd6\xdf\x5c\x49\xb6\x5e\x4b\x32\xd7\xed\x5e\xbc\xfe\x8a\xd3\xeb\xef\xdf\xbb\xf9\x6f\xbe\xef\x3d\x37\x66\x81\x31\x3d\xf4\x64\xb3\xf5\x7f\xdd\x69\xb6\xfe\xc2\x41\xf2\x49\x35\xff\xcc\x8d\x9a\x7f\xca\xdc\x36\x7c\x1f\x3d\xff\xf4\xab\xf3\x37\x66\xfd\x97\x7f\x19\x73\x07\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x4c\xcc\x6f\x01\x00\x00\xff\xff\xc9\xf4\x6d\x29", 566));
		NONFAILING(syz_mount_image(/*fs=*/0x200000000240, /*dir=*/0x200000000280, /*flags=*/0, /*opts=*/0x2000000002c0, /*chdir=*/0, /*size=*/0x236, /*img=*/0x200000000300));
		break;
	case 1:
//  openat arguments: [
//    fd: fd_dir (resource)
//    file: ptr[in, buffer] {
//      buffer: {6d 6e 74 00} (length 0x4)
//    }
//    flags: open_flags = 0x0 (4 bytes)
//    mode: open_mode = 0x0 (2 bytes)
//  ]
//  returns fd
		NONFAILING(memcpy((void*)0x200000000540, "mnt\000", 4));
		res = syscall(__NR_openat, /*fd=*/0xffffff9c, /*file=*/0x200000000540ul, /*flags=*/0, /*mode=*/0);
		if (res != -1)
				r[0] = res;
		break;
	case 2:
//  mkdirat arguments: [
//    fd: fd_dir (resource)
//    path: ptr[in, buffer] {
//      buffer: {6d 6e 74 2f 65 6e 63 72 79 70 74 65 64 5f 64 69 72 00} (length 0x12)
//    }
//    mode: open_mode = 0x1c0 (8 bytes)
//  ]
		NONFAILING(memcpy((void*)0x200000000640, "mnt/encrypted_dir\000", 18));
		syscall(__NR_mkdirat, /*fd=*/0xffffff9c, /*path=*/0x200000000640ul, /*mode=S_IXUSR|S_IWUSR|S_IRUSR*/0x1c0ul);
		break;
	case 3:
//  mknodat arguments: [
//    dirfd: fd_dir (resource)
//    file: ptr[in, buffer] {
//      buffer: {2e 2f 66 69 6c 65 30 00} (length 0x8)
//    }
//    mode: mknod_mode = 0x81c0 (8 bytes)
//    dev: int32 = 0x0 (4 bytes)
//  ]
		NONFAILING(memcpy((void*)0x200000000040, "./file0\000", 8));
		syscall(__NR_mknodat, /*dirfd=*/0xffffff9c, /*file=*/0x200000000040ul, /*mode=S_IFREG|0x1c0*/0x81c0ul, /*dev=*/0);
		break;
	case 4:
//  mknodat arguments: [
//    dirfd: fd_dir (resource)
//    file: ptr[in, buffer] {
//      buffer: {2e 2f 66 69 6c 65 31 00} (length 0x8)
//    }
//    mode: mknod_mode = 0x81c0 (8 bytes)
//    dev: int32 = 0x0 (4 bytes)
//  ]
		NONFAILING(memcpy((void*)0x200000000080, "./file1\000", 8));
		syscall(__NR_mknodat, /*dirfd=*/0xffffff9c, /*file=*/0x200000000080ul, /*mode=S_IFREG|0x1c0*/0x81c0ul, /*dev=*/0);
		break;
	case 5:
//  openat$dir arguments: [
//    fd: const = 0xffffffffffffff9c (8 bytes)
//    file: ptr[in, buffer] {
//      buffer: {2e 2f 66 69 6c 65 30 00} (length 0x8)
//    }
//    flags: open_flags = 0x1 (4 bytes)
//    mode: open_mode = 0x0 (2 bytes)
//  ]
//  returns fd_dir
		NONFAILING(memcpy((void*)0x2000000000c0, "./file0\000", 8));
		res = syscall(__NR_openat, /*fd=*/0xffffffffffffff9cul, /*file=*/0x2000000000c0ul, /*flags=O_WRONLY*/1, /*mode=*/0);
		if (res != -1)
				r[1] = res;
		break;
	case 6:
//  openat$dir arguments: [
//    fd: const = 0xffffffffffffff9c (8 bytes)
//    file: ptr[in, buffer] {
//      buffer: {2e 2f 66 69 6c 65 31 00} (length 0x8)
//    }
//    flags: open_flags = 0x1 (4 bytes)
//    mode: open_mode = 0x0 (2 bytes)
//  ]
//  returns fd_dir
		NONFAILING(memcpy((void*)0x200000000100, "./file1\000", 8));
		res = syscall(__NR_openat, /*fd=*/0xffffffffffffff9cul, /*file=*/0x200000000100ul, /*flags=O_WRONLY*/1, /*mode=*/0);
		if (res != -1)
				r[2] = res;
		break;
	case 7:
//  landlock_create_ruleset arguments: [
//    attr: ptr[in, landlock_ruleset_attr] {
//      landlock_ruleset_attr {
//        handled_access_fs: landlock_access_fs_flags = 0x4000 (8 bytes)
//        handled_access_net: landlock_access_net_flags = 0x0 (8 bytes)
//        scoped: landlock_scope_flags = 0x0 (8 bytes)
//      }
//    }
//    size: bytesize = 0x18 (8 bytes)
//    flags: landlock_create_ruleset_flags = 0x0 (8 bytes)
//  ]
//  returns fd_ruleset
		NONFAILING(*(uint64_t*)0x200000000140 = 0x4000);
		NONFAILING(*(uint64_t*)0x200000000148 = 0);
		NONFAILING(*(uint64_t*)0x200000000150 = 0);
		res = syscall(__NR_landlock_create_ruleset, /*attr=*/0x200000000140ul, /*size=*/0x18ul, /*flags=*/0ul);
		if (res != -1)
				r[3] = res;
		break;
	case 8:
//  landlock_add_rule$LANDLOCK_RULE_PATH_BENEATH arguments: [
//    ruleset_fd: fd_ruleset (resource)
//    rule_type: const = 0x1 (8 bytes)
//    rule_attr: nil
//    flags: const = 0x0 (8 bytes)
//  ]
		syscall(__NR_landlock_add_rule, /*ruleset_fd=*/r[3], /*rule_type=*/1ul, /*rule_attr=*/0ul, /*flags=*/0ul);
		break;
	case 9:
//  prctl$PR_SET_NO_NEW_PRIVS arguments: [
//    option: const = 0x26 (8 bytes)
//    arg: const = 0x1 (8 bytes)
//  ]
		syscall(__NR_prctl, /*option=*/0x26ul, /*arg=*/1ul, 0, 0, 0);
		break;
	case 10:
//  landlock_restrict_self arguments: [
//    ruleset_fd: fd_ruleset (resource)
//    flags: landlock_restrict_self_flags = 0x0 (8 bytes)
//  ]
		syscall(__NR_landlock_restrict_self, /*ruleset_fd=*/r[3], /*flags=*/0ul);
		break;
	case 11:
//  openat$dir arguments: [
//    fd: const = 0xffffffffffffff9c (8 bytes)
//    file: ptr[in, buffer] {
//      buffer: {2e 2f 66 69 6c 65 30 00} (length 0x8)
//    }
//    flags: open_flags = 0x1 (4 bytes)
//    mode: open_mode = 0x0 (2 bytes)
//  ]
//  returns fd_dir
		NONFAILING(memcpy((void*)0x2000000001c0, "./file0\000", 8));
		res = syscall(__NR_openat, /*fd=*/0xffffffffffffff9cul, /*file=*/0x2000000001c0ul, /*flags=O_WRONLY*/1, /*mode=*/0);
		if (res != -1)
				r[4] = res;
		break;
	case 12:
//  openat$dir arguments: [
//    fd: const = 0xffffffffffffff9c (8 bytes)
//    file: ptr[in, buffer] {
//      buffer: {2e 2f 66 69 6c 65 31 00} (length 0x8)
//    }
//    flags: open_flags = 0x1 (4 bytes)
//    mode: open_mode = 0x0 (2 bytes)
//  ]
//  returns fd_dir
		NONFAILING(memcpy((void*)0x200000000200, "./file1\000", 8));
		res = syscall(__NR_openat, /*fd=*/0xffffffffffffff9cul, /*file=*/0x200000000200ul, /*flags=O_WRONLY*/1, /*mode=*/0);
		if (res != -1)
				r[5] = res;
		break;
	case 13:
//  ftruncate arguments: [
//    fd: fd (resource)
//    len: intptr = 0x1 (8 bytes)
//  ]
		syscall(__NR_ftruncate, /*fd=*/r[4], /*len=*/1ul);
		break;
	case 14:
//  ioctl$SNDCTL_MIDI_PRETIME arguments: [
//    fd: fd_seq (resource)
//    cmd: const = 0xc0046d00 (4 bytes)
//    carg: ptr[inout, int32] {
//      int32 = 0xb (4 bytes)
//    }
//  ]
		NONFAILING(*(uint32_t*)0x200000000000 = 0xb);
		syscall(__NR_ioctl, /*fd=*/r[0], /*cmd=*/0xc0046d00, /*carg=*/0x200000000000ul);
		break;
	case 15:
//  ftruncate arguments: [
//    fd: fd (resource)
//    len: intptr = 0x1 (8 bytes)
//  ]
		syscall(__NR_ftruncate, /*fd=*/r[1], /*len=*/1ul);
		break;
	case 16:
//  ftruncate arguments: [
//    fd: fd (resource)
//    len: intptr = 0x1 (8 bytes)
//  ]
		syscall(__NR_ftruncate, /*fd=*/r[2], /*len=*/1ul);
		break;
	case 17:
//  ftruncate arguments: [
//    fd: fd (resource)
//    len: intptr = 0x1 (8 bytes)
//  ]
		syscall(__NR_ftruncate, /*fd=*/r[5], /*len=*/1ul);
		break;
	case 18:
//  openat arguments: [
//    fd: fd_dir (resource)
//    file: ptr[in, buffer] {
//      buffer: {6d 6e 74 2f 65 6e 63 72 79 70 74 65 64 5f 64 69 72 00} (length 0x12)
//    }
//    flags: open_flags = 0x0 (4 bytes)
//    mode: open_mode = 0x0 (2 bytes)
//  ]
//  returns fd
		NONFAILING(memcpy((void*)0x200000000680, "mnt/encrypted_dir\000", 18));
		syscall(__NR_openat, /*fd=*/0xffffff9c, /*file=*/0x200000000680ul, /*flags=*/0, /*mode=*/0);
		break;
	case 19:
//  openat arguments: [
//    fd: fd_dir (resource)
//    file: ptr[in, buffer] {
//      buffer: {6d 6e 74 2f 65 6e 63 72 79 70 74 65 64 5f 64 69 72 2f 66 69 6c 65 00} (length 0x17)
//    }
//    flags: open_flags = 0x42 (4 bytes)
//    mode: open_mode = 0x180 (2 bytes)
//  ]
//  returns fd
		NONFAILING(memcpy((void*)0x200000000700, "mnt/encrypted_dir/file\000", 23));
		res = syscall(__NR_openat, /*fd=*/0xffffff9c, /*file=*/0x200000000700ul, /*flags=O_CREAT|O_RDWR*/0x42, /*mode=S_IWUSR|S_IRUSR*/0x180);
		if (res != -1)
				r[6] = res;
		break;
	case 20:
//  write arguments: [
//    fd: fd (resource)
//    buf: ptr[in, buffer] {
//      buffer: {66 6f 6f} (length 0x3)
//    }
//    count: len = 0x3 (8 bytes)
//  ]
		NONFAILING(memcpy((void*)0x200000000740, "foo", 3));
		syscall(__NR_write, /*fd=*/r[6], /*buf=*/0x200000000740ul, /*count=*/3ul);
		break;
	}

}
int main(void)
{
		syscall(__NR_mmap, /*addr=*/0x1ffffffff000ul, /*len=*/0x1000ul, /*prot=*/0ul, /*flags=MAP_FIXED|MAP_ANONYMOUS|MAP_PRIVATE*/0x32ul, /*fd=*/(intptr_t)-1, /*offset=*/0ul);
	syscall(__NR_mmap, /*addr=*/0x200000000000ul, /*len=*/0x1000000ul, /*prot=PROT_WRITE|PROT_READ|PROT_EXEC*/7ul, /*flags=MAP_FIXED|MAP_ANONYMOUS|MAP_PRIVATE*/0x32ul, /*fd=*/(intptr_t)-1, /*offset=*/0ul);
	syscall(__NR_mmap, /*addr=*/0x200001000000ul, /*len=*/0x1000ul, /*prot=*/0ul, /*flags=MAP_FIXED|MAP_ANONYMOUS|MAP_PRIVATE*/0x32ul, /*fd=*/(intptr_t)-1, /*offset=*/0ul);
	setup_sysctl();
	const char* reason;
	(void)reason;
	install_segv_handler();
			use_temporary_dir();
			loop();
	return 0;
}
